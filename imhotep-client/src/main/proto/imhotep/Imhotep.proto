package imhotep;

option java_package = "com.indeed.imhotep.protobuf";
option java_outer_classname = "ImhotepProtos";
option java_multiple_files = true;

message DatasetInfoMessage {
  optional string dataset = 1;
  repeated string int_field = 3;
  repeated string string_field = 4;
  // No longer used
  repeated string metric = 5;
}

message ShardInfoMessage {
  optional string dataset = 1;
  required string shard_id = 2;
  repeated string loaded_metric = 6;
  required uint32 num_docs = 7;
  optional uint64 version = 8;
}

message ShardMessage {
  optional string dataset = 1;
  required string shard_id = 2;
  required uint32 num_docs = 3;
  optional uint64 version = 4;
  required HostAndPort host = 5;
  optional string path = 6;
  optional string extension = 7;
  required HostAndPort owner = 8;
}

message StatusDumpMessage {
  required uint64 used_memory = 1;
  required uint64 total_memory = 2;
  repeated SessionDumpMessage open_session = 3;
  repeated ShardDumpMessage deleted_loaded_shard = 4;
  optional uint32 deleted_shard_count = 5 [default = 0];
}

message SessionDumpMessage {
  required string session_id = 1;
  required string dataset = 2;
  required string hostname = 3;
  required string username = 4;
  required string ip_address = 5;
  repeated ShardDumpMessage open_shard = 6;
  optional uint32 client_version = 7 [default = 0];
  optional uint64 creation_time = 8 [default = 0];
  optional string client_name = 9 [default = ""];
  optional uint64 used_memory = 10 [default = 0];
  optional uint64 max_used_memory = 11 [default = 0];
}

message ShardDumpMessage {
  required string dataset = 1;
  required string shard_id = 2;
  required uint32 num_docs = 3;
  repeated MetricDumpMessage loaded_metric = 4;
}

message MetricDumpMessage {
  required string metric = 1;
  required uint64 memory_used = 2;
  optional uint32 ref_count = 3;
}

message RegroupConditionMessage {
  required string field = 1;
  required bool int_type = 2;

  optional int64 int_term = 3; // required if int_type == true
  optional string string_term = 4; // required if int_type == false
  optional bool inequality = 5 [default = false];
  optional double score = 6;
}

message GroupRemapMessage {
  required uint32 target_group = 1;

  optional RegroupConditionMessage condition = 2;
  optional uint32 negative_group = 3 [default = 0];
  optional uint32 positive_group = 4 [default = 0];
}

message GroupMultiRemapMessage {
  required uint32 target_group = 1;
  repeated RegroupConditionMessage condition = 2;
  repeated uint32 positive_group = 3;
  optional uint32 negative_group = 4 [default = 0];
}

message ShardBasicInfoMessage {
    optional int32 num_docs = 1 [default = -1];
    required string shard_name = 2;
    optional HostAndPort shard_owner = 3;
}

enum StatsSortOrder {
  UNDEFINED = 1; // No sorting with respect to stats/terms
  ASCENDING = 2;
  DESCENDING = 3;
}

message ImhotepRequest {
  enum RequestType {
    REGROUP = 1;
    GET_FTGS_ITERATOR = 2;
    PUSH_STAT = 3;
    POP_STAT = 4;
    DELETED___GET_SHARD_LIST = 5; // No longer implemented. Use GET_SHARD_LIST in ShardMaster
    OPEN_SESSION = 6;
    CLOSE_SESSION = 7;
    GET_TOTAL_DOC_FREQ = 8;
    GET_STATUS_DUMP = 9;
    DELETED___GET_GROUP_STATS = 10; // No longer implemented. Use STREAMING_GET_GROUP_STATS instead
    OPEN_SESSION_FROM_SNAPSHOT = 11;
    EXPORT_SNAPSHOT = 12;
    RANDOM_REGROUP = 13;
    INT_OR_REGROUP = 14;
    STRING_OR_REGROUP = 15;
    QUERY_REGROUP = 16;
    METRIC_REGROUP = 17;
    DELETED___METRIC_REGROUP_2D = 18;
    CREATE_DYNAMIC_METRIC = 19;
    UPDATE_DYNAMIC_METRIC = 20;
    RESET_GROUPS = 21;
    DELETED___GET_SHARD_INFO_LIST = 22; // No longer implemented. Use GET_SHARD_LIST in ShardMaster
    RANDOM_MULTI_REGROUP = 23;
    MULTISPLIT_REGROUP = 24;
    APPROXIMATE_TOP_TERMS = 25;
    CONDITIONAL_UPDATE_DYNAMIC_METRIC = 26;
    EXPLODED_MULTISPLIT_REGROUP = 27;
    METRIC_FILTER = 28;
    DELETED___GET_DOC_ITERATOR = 29; // No longer implemented.
    EXPLODED_REGROUP = 30;
    OPTIMIZE_SESSION = 31;
    GET_FTGS_SPLIT = 32;
    MERGE_FTGS_SPLIT = 33;
    GROUP_CONDITIONAL_UPDATE_DYNAMIC_METRIC = 34;
    GET_SUBSET_FTGS_ITERATOR = 35;
    GET_SUBSET_FTGS_SPLIT = 36;
    MERGE_SUBSET_FTGS_SPLIT = 37;
    GET_NUM_GROUPS = 38;
    REGEX_REGROUP = 39;
    DELETED___GET_FTGS_SPLIT_NATIVE=40;
    GROUP_QUERY_UPDATE_DYNAMIC_METRIC = 41;
    STREAMING_GET_GROUP_STATS = 42;
    GET_PERFORMANCE_STATS = 43;
    DELETED___GET_DATASET_METADATA = 44; // No longer implemented. Data comes from ShardMaster
    DELETED___GET_SHARD_LIST_FOR_TIME = 45; // No longer implemented. Data comes form ShardMaster
    RANDOM_METRIC_REGROUP = 46;
    RANDOM_METRIC_MULTI_REGROUP = 47;
    GET_DISTINCT = 48;
    MERGE_DISTINCT_SPLIT = 49;
    REMAP_GROUPS = 50;
    MERGE_MULTI_FTGS_SPLIT = 51;
    MERGE_MULTI_DISTINCT_SPLIT = 52;
    GET_SHARD_FILE = 53;
    GET_SHARD_FILE_ATTRIBUTES = 54;
    LIST_SHARD_FILE_ATTRIBUTES = 55;
    SHUTDOWN = 255;
  }

  required RequestType request_type = 1;

  optional string username = 2;

  // for getFTGSIterator() and getTotalDocFreq()
  repeated string int_fields = 3;
  repeated string string_fields = 4;

  // for pushStat()
  optional string metric = 5;

  // for openSession()
  optional string dataset = 6;
  // No longer implemented. Instead, use shards.
  repeated string shard_request = 7;

  // for getGroupStats()
  optional uint32 stat = 8;

  // for all except getShardList() and openSession()
  optional string session_id = 9;

  // for regroup()
  repeated GroupRemapMessage remap_rules = 10;

  // for randomRegroup()
  optional string field = 11;
  optional bool isIntField = 12;
  optional string salt = 13;
  optional double p = 14;
  optional int32 targetGroup = 15;
  optional int32 negativeGroup = 16;
  optional int32 positiveGroup = 17;

  // for int/stringOrRegroup()
  repeated int64 int_term = 18;
  repeated string string_term = 19;

  // for queryRegroup()
  optional QueryRemapMessage query_remap_rule = 20;

  // for metricRegroup()
  optional int32 deleted___x_stat = 21;
  optional DocStat x_stat_docstat = 72;
  optional int64 x_min = 22;
  optional int64 x_max = 23;
  optional int64 x_interval_size = 24;

  // for metricRegroup2D()
  optional int32 deleted___y_stat = 25;
  optional int64 deleted___y_min = 26;
  optional int64 deleted___y_max = 27;
  optional int64 deleted___y_interval_size = 28;
  
  // used in openSession()  
  optional int32 merge_thread_limit = 29 [default = 0];
  optional int32 session_priority = 30 [default = 0];

  // dynamic messages
  optional string dynamic_metric_name = 31;
  repeated sint32 dynamic_metric_deltas = 32 [packed=true];

  // for randomMultiRegroup()
  repeated double percentages = 33;
  repeated uint32 result_groups = 34;

  // for regroup()
  repeated GroupMultiRemapMessage multisplit_remap_rule = 35;

  // used in openSession()
  optional bool optimize_group_zero_lookups = 36 [default = false];

  // for approximateTopTerms()
  optional int32 k = 37;

  // for conditionalUpdateDynamicMetric()
  repeated RegroupConditionMessage conditions = 38;

  // for exploded multisplit regroup
  optional int32 length = 39;

  // for metricFilter()
  optional bool negate = 40;

  // used in openSession()
  optional uint32 client_version = 41 [default = 0];

  optional bool error_on_collisions = 42;

  //for getFtgsSplit and mergeFtgsSplit
  optional int32 splitIndex = 43;
  //for mergeFtgsSplit
  repeated HostAndPort nodes = 44;
  //for getFtgsSplit
  optional int32 numSplits = 45;
  //for groupConditionalUpdateDynamicMetric
  repeated uint32 groups = 46;

  //for ftgs subset calls
  repeated IntFieldAndTerms intFieldsToTerms = 47;
  repeated StringFieldAndTerms stringFieldsToTerms = 48;

  //for metric regroup with no gutters
  optional bool no_gutters = 49;

  // for regex regroup
  optional string regex = 50;

  // used in openSession()
  optional int64 temp_file_size_limit = 51 [default = -1];

  optional bool deleted_useNativeFtgs = 52 [deprecated = true];

  // session timeout in milliseconds
  optional int64 sessionTimeout = 53 [default = 0];

  // for getFTGSIterator
  optional int64 termLimit = 54 [default = 0];

  // for getFTGSIterator and mergeFTGSSplit
  optional int32 sortStat = 55 [default = -1];

  // for openSession
  optional string clientName = 56 [default = ""];

  // for getStatusDump
  optional bool includeShardList = 57 [default = false];

  // for groupQueryUpdateDynamicMetric
  repeated QueryMessage queryMessages = 58;

  // for getPerformanceStats
  optional bool resetPerformanceStats = 59;

  // for closeSession
  optional bool returnStatsOnClose = 60;

  // allow session forwarding
  optional bool allowSessionForwarding = 61 [default = false];

  // for getShardlistForTime
  optional uint64 startUnixtime = 62;
  optional uint64 endUnixtime = 63;

  // for getFTGSIterator call
  optional bool sortedFTGS = 64 [default = true];

  // used in openSession()
  repeated ShardBasicInfoMessage shards = 65;

  // for remapping groups
  repeated int32 fromGroups = 66 [packed = true];
  repeated int32 toGroups = 67 [packed = true];
  optional bool filterOutNotTargeted = 68 [default = true];

  // for MERGE_MULTI_FTGS_SPLIT and MERGE_MULTI_DISTINCT_SPLIT
  optional MultiFTGSRequest multiFtgsRequest = 69;

  // used in everything that takes a List<String> stat or List<List<String>> stats
  repeated DocStat docStat = 70;
  optional bool hasStats = 71 [default=false];

  //for topK and bottomK
  optional StatsSortOrder statsSortOrder = 73;

  // for download shard files
  optional string shardFileUri = 74;
}

message DocStat {
  repeated string stat = 1;
}

message AggregateStat {
  enum StatType {
    OPERATION = 1;
    SESSION_STAT = 2;
    PER_GROUP_VALUE = 3;
    CONSTANT = 4;
  }

  required StatType stat_type = 1;

  // For StatType.OPERATION
  optional string operation = 2;

  // For StatType.SESSION_STAT;
  optional string session_id = 3;
  optional int32 stat_index = 4;

  // For StatType.PER_GROUP_VALUE
  repeated double values = 5 [packed=true];

  // For StatType.CONSTANT
  optional double value = 6;
}

message MultiFTGSRequest {
  message MultiFTGSSession {
    repeated HostAndPort nodes = 1;
    optional string session_id = 2;
    optional string field = 3;
    repeated DocStat stats = 4;
    optional bool hasStats = 5 [default=false];
  }

  repeated MultiFTGSSession sessionInfo = 1;
  repeated AggregateStat select = 2;

  // Stat value of 0.0 is treated as false.
  // Stat value of anything else is treated as true.
  repeated AggregateStat filter = 3;
  // For windowed aggregate distinct
  repeated int32 windowSize = 10;
  // For windowed aggregate distinct
  // big endian encoded ints because ArrayList<Integer> is horrible
  optional bytes parentGroups = 11;

  optional bool isIntField = 4;

  optional int32 splitIndex = 5;
  repeated HostAndPort nodes = 6;
  optional int64 termLimit = 7 [default = 0];
  optional int32 sortStat = 8 [default = -1];
  optional bool sortedFTGS = 9 [default = true];
  optional StatsSortOrder StatsSortOrder = 12;
}

message ImhotepResponse {
  enum ResponseCode {
    OK = 1;
    OUT_OF_MEMORY = 2;
    OTHER_ERROR = 3;
    KNOWN_ERROR = 4;
  }

  optional ResponseCode response_code = 1 [default = OK];

  // for openSession()
  optional string session_id = 2;

  // no longer implemented
  repeated ShardInfoMessage shard_info = 3;

  // for pushStat()/popStat()/getFTGS
  optional uint32 num_stats = 4;

  // for getTotalDocFreq()
  optional uint64 total_doc_freq = 5;

  // for getStatusDump()
  optional StatusDumpMessage status_dump = 6;

  // for getGroupStats()
  repeated sint64 deleted___group_stat = 7 [deprecated = true];
  optional uint32 group_stat_size = 15;

  // for exportSnapshot()
  repeated string shard_id = 8;

  // for regroups/getFTGS
  optional uint32 num_groups = 9;

  // error stuff
  optional string exception_type = 10;
  optional string exception_message = 11;

  // no longer used
  repeated DatasetInfoMessage dataset_info = 12;

  optional string exception_stack_trace = 14;

  // for approximateTopTerms()
  repeated TermCountMessage top_terms = 13;

  // 14 is used above for exception_stack_trace
  // 15 is used above for group_stat_size

  // for getPerformanceStats()
  optional PerformanceStatsMessage performance_stats = 16;

  // for openSession() forwarding the session to a different port
  optional uint32 new_port = 17 [default = 0];

  // for download shard files
  optional uint64 fileLength = 18;

  // for get shard file attributes
  optional FileAttributeMessage fileAttributes = 19;

  // for list shard file attributes
  repeated FileAttributeMessage subFilesAttributes = 20;
}

enum Operator {
  AND = 1;
  OR = 2;
  NOT = 3;
}

message TermMessage {
  optional bool is_int_field = 1;
  optional string field_name = 2;
  optional int64 term_int_val = 3;
  optional string term_string_val = 4;
}

message TermCountMessage {
  optional TermMessage term = 1;
  optional int64 count = 2;
}

message QueryMessage {
  optional Operator operator = 1;
  repeated QueryMessage operand = 2;

  optional TermMessage min_term = 3;

  optional TermMessage max_term = 4;
  optional bool is_max_inclusive = 5;
}

message QueryRemapMessage {
  optional int32 target_group = 1;
  optional QueryMessage query = 2;
  optional int32 negative_group = 3;
  optional int32 positive_group = 4;
}

message HostAndPort {
  optional string host = 1;
  optional int32 port = 2;
}

message IntFieldAndTerms {
  optional string field = 1;
  repeated int64 terms = 2 [packed = true];
}

message StringFieldAndTerms {
  optional string field = 1;
  repeated string terms = 2;
}

message PerformanceStatsMessage {
  optional int64 cpu_time = 1;
  optional int64 max_memory_used = 2;
  optional int64 ftgs_temp_file_size = 3;
  optional int64 field_files_read_size = 4;
  repeated StringLongMessage custom_stats = 5;
  optional int64 cpu_slots_exec_time_ms = 6;
  optional int64 cpu_slots_wait_time_ms = 7;
  optional int64 io_slots_exec_time_ms = 8;
  optional int64 io_slots_wait_time_ms = 9;
}

message StringLongMessage {
  required string Key = 1;
  required int64 Value = 2;
}

// Used for GET_SHARD_LIST
message DatasetShardsMessage {
  required string dataset = 1;
  repeated ShardInfoMessage shards = 2;
}

message ShardMasterResponse {
  enum ResponseCode {
    OK = 1;
    ERROR = 2;
  }

  optional ResponseCode response_code = 1 [default = OK];
  // in case for ERROR
  optional string error_message = 2;
  // for GET_SHARD_LIST_FOR_TIME
  repeated ShardMessage shards_in_time = 4;
  // for GET_DATASET_METADATA
  repeated DatasetInfoMessage metadata = 5;
  // for GET_SHARD_LIST
  repeated DatasetShardsMessage all_shards = 6;
}

message ShardMasterRequest {
  enum RequestType {
    DELETED_GET_ASSIGNMENT = 1; // Depricated
    GET_SHARD_LIST_FOR_TIME = 2;
    GET_DATASET_METADATA = 3;
    GET_SHARD_LIST = 4;
    REFRESH_FIELDS_FOR_DATASET = 5;
  }

  required RequestType request_type = 1;
  // No longer used
  optional HostAndPort node = 2;
  // for GET_SHARD_LIST_FOR_TIME
  optional uint64 startTime = 3;
  optional uint64 endTime = 4;
  optional string dataset = 5;
  // for REFRESH_FIELDS_FOR_DATASET
  optional string dataset_to_refresh = 6;
}

message FileAttributeMessage {
  optional string path = 1;
  required bool isDirectory = 2;
  required uint64 size = 3;
}